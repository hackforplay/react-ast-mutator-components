import * as t from '@babel/types';
import { NodeProps as P } from './types';
export declare function ArrayExpression(props: P<t.ArrayExpression>): any;
export declare function AssignmentExpression(props: P<t.AssignmentExpression>): any;
export declare function BinaryExpression(props: P<t.BinaryExpression>): any;
export declare function InterpreterDirective(props: P<t.InterpreterDirective>): any;
export declare function Directive(props: P<t.Directive>): any;
export declare function DirectiveLiteral(props: P<t.DirectiveLiteral>): any;
export declare function BlockStatement(props: P<t.BlockStatement>): any;
export declare function BreakStatement(props: P<t.BreakStatement>): any;
export declare function CallExpression(props: P<t.CallExpression>): any;
export declare function CatchClause(props: P<t.CatchClause>): any;
export declare function ConditionalExpression(props: P<t.ConditionalExpression>): any;
export declare function ContinueStatement(props: P<t.ContinueStatement>): any;
export declare function DebuggerStatement(props: P<t.DebuggerStatement>): any;
export declare function DoWhileStatement(props: P<t.DoWhileStatement>): any;
export declare function EmptyStatement(props: P<t.EmptyStatement>): null;
export declare function ExpressionStatement(props: P<t.ExpressionStatement>): any;
export declare function File(props: P<t.File>): any;
export declare function ForInStatement(props: P<t.ForInStatement>): any;
export declare function ForStatement(props: P<t.ForStatement>): any;
export declare function FunctionDeclaration(props: P<t.FunctionDeclaration>): any;
export declare function FunctionExpression(props: P<t.FunctionExpression>): any;
export declare function Identifier(props: P<t.Identifier>): any;
export declare function IfStatement(props: P<t.IfStatement>): any;
export declare function LabeledStatement(props: P<t.LabeledStatement>): any;
export declare function StringLiteral(props: P<t.StringLiteral>): any;
export declare function NumericLiteral(props: P<t.NumericLiteral>): any;
export declare function NullLiteral(props: P<t.NullLiteral>): any;
export declare function BooleanLiteral(props: P<t.BooleanLiteral>): any;
export declare function RegExpLiteral(props: P<t.RegExpLiteral>): any;
export declare function LogicalExpression(props: P<t.LogicalExpression>): any;
export declare function MemberExpression(props: P<t.MemberExpression>): any;
export declare function NewExpression(props: P<t.NewExpression>): any;
export declare function Program(props: P<t.Program>): any;
export declare function ObjectExpression(props: P<t.ObjectExpression>): any;
export declare function ObjectMethod(props: P<t.ObjectMethod>): any;
export declare function ObjectProperty(props: P<t.ObjectProperty>): any;
export declare function RestElement(props: P<t.RestElement>): any;
export declare function ReturnStatement(props: P<t.ReturnStatement>): any;
export declare function SequenceExpression(props: P<t.SequenceExpression>): any;
export declare function ParenthesizedExpression(props: P<t.ParenthesizedExpression>): any;
export declare function SwitchCase(props: P<t.SwitchCase>): any;
export declare function SwitchStatement(props: P<t.SwitchStatement>): any;
export declare function ThisExpression(props: P<t.ThisExpression>): any;
export declare function ThrowStatement(props: P<t.ThrowStatement>): any;
export declare function TryStatement(props: P<t.TryStatement>): any;
export declare function UnaryExpression(props: P<t.UnaryExpression>): any;
export declare function UpdateExpression(props: P<t.UpdateExpression>): any;
export declare function VariableDeclaration(props: P<t.VariableDeclaration>): any;
export declare function VariableDeclarator(props: P<t.VariableDeclarator>): any;
export declare function WhileStatement(props: P<t.WhileStatement>): any;
export declare function WithStatement(props: P<t.WithStatement>): any;
export declare function AssignmentPattern(props: P<t.AssignmentPattern>): any;
export declare function ArrayPattern(props: P<t.ArrayPattern>): any;
export declare function ArrowFunctionExpression(props: P<t.ArrowFunctionExpression>): any;
export declare function ClassBody(props: P<t.ClassBody>): any;
export declare function ClassDeclaration(props: P<t.ClassDeclaration>): any;
export declare function ClassExpression(props: P<t.ClassExpression>): any;
export declare function ExportAllDeclaration(props: P<t.ExportAllDeclaration>): any;
export declare function ExportDefaultDeclaration(props: P<t.ExportDefaultDeclaration>): any;
export declare function ExportNamedDeclaration(props: P<t.ExportNamedDeclaration>): any;
export declare function ExportSpecifier(props: P<t.ExportSpecifier>): any;
export declare function ForOfStatement(props: P<t.ForOfStatement>): any;
export declare function ImportDeclaration(props: P<t.ImportDeclaration>): any;
export declare function ImportDefaultSpecifier(props: P<t.ImportDefaultSpecifier>): any;
export declare function ImportNamespaceSpecifier(props: P<t.ImportNamespaceSpecifier>): any;
export declare function ImportSpecifier(props: P<t.ImportSpecifier>): any;
export declare function MetaProperty(props: P<t.MetaProperty>): any;
export declare function ClassMethod(props: P<t.ClassMethod>): any;
export declare function ObjectPattern(props: P<t.ObjectPattern>): any;
export declare function SpreadElement(props: P<t.SpreadElement>): any;
export declare function Super(props: P<t.Super>): any;
export declare function TaggedTemplateExpression(props: P<t.TaggedTemplateExpression>): any;
export declare function TemplateElement(props: P<t.TemplateElement>): any;
export declare function TemplateLiteral(props: P<t.TemplateLiteral>): any;
export declare function YieldExpression(props: P<t.YieldExpression>): any;
export declare function AnyTypeAnnotation(props: P<t.AnyTypeAnnotation>): any;
export declare function ArrayTypeAnnotation(props: P<t.ArrayTypeAnnotation>): any;
export declare function BooleanTypeAnnotation(props: P<t.BooleanTypeAnnotation>): any;
export declare function BooleanLiteralTypeAnnotation(props: P<t.BooleanLiteralTypeAnnotation>): any;
export declare function NullLiteralTypeAnnotation(props: P<t.NullLiteralTypeAnnotation>): any;
export declare function ClassImplements(props: P<t.ClassImplements>): any;
export declare function DeclareClass(props: P<t.DeclareClass>): any;
export declare function DeclareFunction(props: P<t.DeclareFunction>): any;
export declare function DeclareInterface(props: P<t.DeclareInterface>): any;
export declare function DeclareModule(props: P<t.DeclareModule>): any;
export declare function DeclareModuleExports(props: P<t.DeclareModuleExports>): any;
export declare function DeclareTypeAlias(props: P<t.DeclareTypeAlias>): any;
export declare function DeclareOpaqueType(props: P<t.DeclareOpaqueType>): any;
export declare function DeclareVariable(props: P<t.DeclareVariable>): any;
export declare function DeclareExportDeclaration(props: P<t.DeclareExportDeclaration>): any;
export declare function DeclareExportAllDeclaration(props: P<t.DeclareExportAllDeclaration>): any;
export declare function DeclaredPredicate(props: P<t.DeclaredPredicate>): any;
export declare function ExistsTypeAnnotation(props: P<t.ExistsTypeAnnotation>): any;
export declare function FunctionTypeAnnotation(props: P<t.FunctionTypeAnnotation>): any;
export declare function FunctionTypeParam(props: P<t.FunctionTypeParam>): any;
export declare function GenericTypeAnnotation(props: P<t.GenericTypeAnnotation>): any;
export declare function InferredPredicate(props: P<t.InferredPredicate>): any;
export declare function InterfaceExtends(props: P<t.InterfaceExtends>): any;
export declare function InterfaceDeclaration(props: P<t.InterfaceDeclaration>): any;
export declare function InterfaceTypeAnnotation(props: P<t.InterfaceTypeAnnotation>): any;
export declare function IntersectionTypeAnnotation(props: P<t.IntersectionTypeAnnotation>): any;
export declare function MixedTypeAnnotation(props: P<t.MixedTypeAnnotation>): any;
export declare function EmptyTypeAnnotation(props: P<t.EmptyTypeAnnotation>): any;
export declare function NullableTypeAnnotation(props: P<t.NullableTypeAnnotation>): any;
export declare function NumberLiteralTypeAnnotation(props: P<t.NumberLiteralTypeAnnotation>): any;
export declare function NumberTypeAnnotation(props: P<t.NumberTypeAnnotation>): any;
export declare function ObjectTypeAnnotation(props: P<t.ObjectTypeAnnotation>): any;
export declare function ObjectTypeInternalSlot(props: P<t.ObjectTypeInternalSlot>): any;
export declare function ObjectTypeCallProperty(props: P<t.ObjectTypeCallProperty>): any;
export declare function ObjectTypeIndexer(props: P<t.ObjectTypeIndexer>): any;
export declare function ObjectTypeProperty(props: P<t.ObjectTypeProperty>): any;
export declare function ObjectTypeSpreadProperty(props: P<t.ObjectTypeSpreadProperty>): any;
export declare function OpaqueType(props: P<t.OpaqueType>): any;
export declare function QualifiedTypeIdentifier(props: P<t.QualifiedTypeIdentifier>): any;
export declare function StringLiteralTypeAnnotation(props: P<t.StringLiteralTypeAnnotation>): any;
export declare function StringTypeAnnotation(props: P<t.StringTypeAnnotation>): any;
export declare function ThisTypeAnnotation(props: P<t.ThisTypeAnnotation>): any;
export declare function TupleTypeAnnotation(props: P<t.TupleTypeAnnotation>): any;
export declare function TypeofTypeAnnotation(props: P<t.TypeofTypeAnnotation>): any;
export declare function TypeAlias(props: P<t.TypeAlias>): any;
export declare function TypeAnnotation(props: P<t.TypeAnnotation>): any;
export declare function TypeCastExpression(props: P<t.TypeCastExpression>): any;
export declare function TypeParameter(props: P<t.TypeParameter>): any;
export declare function TypeParameterDeclaration(props: P<t.TypeParameterDeclaration>): any;
export declare function TypeParameterInstantiation(props: P<t.TypeParameterInstantiation>): any;
export declare function UnionTypeAnnotation(props: P<t.UnionTypeAnnotation>): any;
export declare function Variance(props: P<t.Variance>): any;
export declare function VoidTypeAnnotation(props: P<t.VoidTypeAnnotation>): any;
export declare function JSXAttribute(props: P<t.JSXAttribute>): any;
export declare function JSXClosingElement(props: P<t.JSXClosingElement>): any;
export declare function JSXElement(props: P<t.JSXElement>): any;
export declare function JSXEmptyExpression(props: P<t.JSXEmptyExpression>): any;
export declare function JSXExpressionContainer(props: P<t.JSXExpressionContainer>): any;
export declare function JSXSpreadChild(props: P<t.JSXSpreadChild>): any;
export declare function JSXIdentifier(props: P<t.JSXIdentifier>): any;
export declare function JSXMemberExpression(props: P<t.JSXMemberExpression>): any;
export declare function JSXNamespacedName(props: P<t.JSXNamespacedName>): any;
export declare function JSXOpeningElement(props: P<t.JSXOpeningElement>): any;
export declare function JSXSpreadAttribute(props: P<t.JSXSpreadAttribute>): any;
export declare function JSXText(props: P<t.JSXText>): any;
export declare function JSXFragment(props: P<t.JSXFragment>): any;
export declare function JSXOpeningFragment(props: P<t.JSXOpeningFragment>): any;
export declare function JSXClosingFragment(props: P<t.JSXClosingFragment>): any;
export declare function Noop(props: P<t.Noop>): any;
export declare function Placeholder(props: P<t.Placeholder>): any;
export declare function ArgumentPlaceholder(props: P<t.ArgumentPlaceholder>): any;
export declare function AwaitExpression(props: P<t.AwaitExpression>): any;
export declare function BindExpression(props: P<t.BindExpression>): any;
export declare function ClassProperty(props: P<t.ClassProperty>): any;
export declare function OptionalMemberExpression(props: P<t.OptionalMemberExpression>): any;
export declare function PipelineTopicExpression(props: P<t.PipelineTopicExpression>): any;
export declare function PipelineBareFunction(props: P<t.PipelineBareFunction>): any;
export declare function PipelinePrimaryTopicReference(props: P<t.PipelinePrimaryTopicReference>): any;
export declare function OptionalCallExpression(props: P<t.OptionalCallExpression>): any;
export declare function ClassPrivateProperty(props: P<t.ClassPrivateProperty>): any;
export declare function ClassPrivateMethod(props: P<t.ClassPrivateMethod>): any;
export declare function Import(props: P<t.Import>): any;
export declare function Decorator(props: P<t.Decorator>): any;
export declare function DoExpression(props: P<t.DoExpression>): any;
export declare function ExportDefaultSpecifier(props: P<t.ExportDefaultSpecifier>): any;
export declare function ExportNamespaceSpecifier(props: P<t.ExportNamespaceSpecifier>): any;
export declare function PrivateName(props: P<t.PrivateName>): any;
export declare function BigIntLiteral(props: P<t.BigIntLiteral>): any;
export declare function TSParameterProperty(props: P<t.TSParameterProperty>): any;
export declare function TSDeclareFunction(props: P<t.TSDeclareFunction>): any;
export declare function TSDeclareMethod(props: P<t.TSDeclareMethod>): any;
export declare function TSQualifiedName(props: P<t.TSQualifiedName>): any;
export declare function TSCallSignatureDeclaration(props: P<t.TSCallSignatureDeclaration>): any;
export declare function TSConstructSignatureDeclaration(props: P<t.TSConstructSignatureDeclaration>): any;
export declare function TSPropertySignature(props: P<t.TSPropertySignature>): any;
export declare function TSMethodSignature(props: P<t.TSMethodSignature>): any;
export declare function TSIndexSignature(props: P<t.TSIndexSignature>): any;
export declare function TSAnyKeyword(props: P<t.TSAnyKeyword>): any;
export declare function TSUnknownKeyword(props: P<t.TSUnknownKeyword>): any;
export declare function TSNumberKeyword(props: P<t.TSNumberKeyword>): any;
export declare function TSObjectKeyword(props: P<t.TSObjectKeyword>): any;
export declare function TSBooleanKeyword(props: P<t.TSBooleanKeyword>): any;
export declare function TSStringKeyword(props: P<t.TSStringKeyword>): any;
export declare function TSSymbolKeyword(props: P<t.TSSymbolKeyword>): any;
export declare function TSVoidKeyword(props: P<t.TSVoidKeyword>): any;
export declare function TSUndefinedKeyword(props: P<t.TSUndefinedKeyword>): any;
export declare function TSNullKeyword(props: P<t.TSNullKeyword>): any;
export declare function TSNeverKeyword(props: P<t.TSNeverKeyword>): any;
export declare function TSThisType(props: P<t.TSThisType>): any;
export declare function TSFunctionType(props: P<t.TSFunctionType>): any;
export declare function TSConstructorType(props: P<t.TSConstructorType>): any;
export declare function TSTypeReference(props: P<t.TSTypeReference>): any;
export declare function TSTypePredicate(props: P<t.TSTypePredicate>): any;
export declare function TSTypeQuery(props: P<t.TSTypeQuery>): any;
export declare function TSTypeLiteral(props: P<t.TSTypeLiteral>): any;
export declare function TSArrayType(props: P<t.TSArrayType>): any;
export declare function TSTupleType(props: P<t.TSTupleType>): any;
export declare function TSOptionalType(props: P<t.TSOptionalType>): any;
export declare function TSRestType(props: P<t.TSRestType>): any;
export declare function TSUnionType(props: P<t.TSUnionType>): any;
export declare function TSIntersectionType(props: P<t.TSIntersectionType>): any;
export declare function TSConditionalType(props: P<t.TSConditionalType>): any;
export declare function TSInferType(props: P<t.TSInferType>): any;
export declare function TSParenthesizedType(props: P<t.TSParenthesizedType>): any;
export declare function TSTypeOperator(props: P<t.TSTypeOperator>): any;
export declare function TSIndexedAccessType(props: P<t.TSIndexedAccessType>): any;
export declare function TSMappedType(props: P<t.TSMappedType>): any;
export declare function TSLiteralType(props: P<t.TSLiteralType>): any;
export declare function TSExpressionWithTypeArguments(props: P<t.TSExpressionWithTypeArguments>): any;
export declare function TSInterfaceDeclaration(props: P<t.TSInterfaceDeclaration>): any;
export declare function TSInterfaceBody(props: P<t.TSInterfaceBody>): any;
export declare function TSTypeAliasDeclaration(props: P<t.TSTypeAliasDeclaration>): any;
export declare function TSAsExpression(props: P<t.TSAsExpression>): any;
export declare function TSTypeAssertion(props: P<t.TSTypeAssertion>): any;
export declare function TSEnumDeclaration(props: P<t.TSEnumDeclaration>): any;
export declare function TSEnumMember(props: P<t.TSEnumMember>): any;
export declare function TSModuleDeclaration(props: P<t.TSModuleDeclaration>): any;
export declare function TSModuleBlock(props: P<t.TSModuleBlock>): any;
export declare function TSImportType(props: P<t.TSImportType>): any;
export declare function TSImportEqualsDeclaration(props: P<t.TSImportEqualsDeclaration>): any;
export declare function TSExternalModuleReference(props: P<t.TSExternalModuleReference>): any;
export declare function TSNonNullExpression(props: P<t.TSNonNullExpression>): any;
export declare function TSExportAssignment(props: P<t.TSExportAssignment>): any;
export declare function TSNamespaceExportDeclaration(props: P<t.TSNamespaceExportDeclaration>): any;
export declare function TSTypeAnnotation(props: P<t.TSTypeAnnotation>): any;
export declare function TSTypeParameterInstantiation(props: P<t.TSTypeParameterInstantiation>): any;
export declare function TSTypeParameterDeclaration(props: P<t.TSTypeParameterDeclaration>): any;
export declare function TSTypeParameter(props: P<t.TSTypeParameter>): any;
//# sourceMappingURL=AnyNodes.d.ts.map